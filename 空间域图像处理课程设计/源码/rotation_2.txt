import cv2
import numpy as np
import time
#使用近似方法

# 读取原始图片
def f_rotation_2(a, path):
    start_time = time.perf_counter()  # 记录开始时间
    img = cv2.imread(path)
    # 计算图片中心
    height, width = img.shape[:2]
    center = (width // 2, height // 2)
    # 定义旋转角度（以度数为单位，逆时针方向为正方向）
    angle = a
    # 构建旋转矩阵
    M = cv2.getRotationMatrix2D(center, angle, 1.0)

    # 计算旋转后的图像大小和边界框
    rotated_width = int(height * abs(np.sin(np.radians(angle))) + width * abs(np.cos(np.radians(angle))))
    rotated_height = int(width * abs(np.sin(np.radians(angle))) + height * abs(np.cos(np.radians(angle))))
    x1 = int((rotated_width - width) / 2.0)
    y1 = int((rotated_height - height) / 2.0)
    x2 = x1 + width
    y2 = y1 + height
    # 对图像进行仿射变换，使旋转后的图像在中心位置
    M[0, 2] += (rotated_width - width) // 2
    M[1, 2] += (rotated_height - height) // 2
    rotated_img = cv2.warpAffine(img, M, (rotated_width, rotated_height), flags=cv2.INTER_AREA)

    end_time = time.perf_counter()  # 记录结束时间
    run_time = end_time - start_time  # 计算函数运行时间
    print(f"The function took {run_time:.6f}s to run.")

    return rotated_img
