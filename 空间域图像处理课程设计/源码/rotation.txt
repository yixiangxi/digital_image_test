import numpy as np
import cv2
import  time
def bilinear_interpolation(image, x, y):
    """
    双线性插值函数
    """
    x1 = int(x)
    x2 = x1 + 1
    y1 = int(y)
    y2 = y1 + 1
    if x2 >= image.shape[1]:
        x2 = x1
    if y2 >= image.shape[0]:
        y2 = y1
    f11 = image[y1, x1]
    f12 = image[y2, x1]
    f21 = image[y1, x2]
    f22 = image[y2, x2]
    result = (f11*(x2-x)*(y2-y) +
              f21*(x-x1)*(y2-y) +
              f12*(x2-x)*(y-y1) +
              f22*(x-x1)*(y-y1))
    return result

def f_rotation_1(angle, path):
    start_time = time.perf_counter()  # 记录开始时间
    # 将角度转换为弧度
    theta = np.deg2rad(angle)
    image = cv2.imread(path)
    # 计算图像中心点坐标
    center = np.array([image.shape[1]/2, image.shape[0]/2])

    # 构造旋转矩阵
    rotation_matrix = np.array([
        [np.cos(theta), -np.sin(theta)],
        [np.sin(theta), np.cos(theta)]
    ])

    # 初始化旋转后图像矩阵
    rotated_image = np.zeros_like(image)

    # 对每个像素进行旋转
    for i in range(rotated_image.shape[0]):
        for j in range(rotated_image.shape[1]):
            # 计算旋转后的坐标
            rotated_offset = np.dot(rotation_matrix, np.array([j,i])-center)+center
            # 双线性插值，防止旋转后的像素位置越界
            if rotated_offset[0]<0 or rotated_offset[0]>=image.shape[1]-1 or rotated_offset[1]<0 or rotated_offset[1]>=image.shape[0]-1:
                rotated_image[i, j, :] = [0, 0, 0]
            else:
                rotated_image[i, j, :] = bilinear_interpolation(image, rotated_offset[0], rotated_offset[1])
    end_time = time.perf_counter()  # 记录结束时间
    run_time = end_time - start_time  # 计算函数运行时间
    print(f"The function took {run_time:.6f}s to run.")
    return rotated_image
